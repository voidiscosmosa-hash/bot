# main.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–Ω–æ–ø–∫–∞ back_to_user_menu, NameError, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤, —É–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)

import asyncio
import logging
import os
import shutil
import random
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types.error_event import ErrorEvent
import aiosqlite
from giveaway_system import GiveawaySystem
from config import BOT_TOKEN, ADMIN_ID
from database import db
from keyboards import (
    get_admin_menu, get_user_menu, get_commission_menu,
    get_ad_menu, get_giveaway_menu_keyboard, get_strategy_menu,
    get_delay_menu, get_currency_menu, get_stats_menu, get_channels_menu,
    get_manage_admins_menu, get_commission_type_keyboard, get_favorite_type_keyboard,
    get_giveaway_target_menu, get_giveaway_info_keyboard, get_giveaway_list_keyboard
)
from states import (
    CommissionStates, AdStates, GiveawayStates,
    ChannelStates, BalanceStates, AdminStates
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
giveaway_system = None

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
giveaway_settings = {
    'strategy': 'random',
    'delay': 60,
    'winners': 1,
    'currency': 'USDT',
    'prize': 0
}

# –ü—É—Ç—å –∫ –ë–î
try:
    from config import DATABASE_PATH
except ImportError:
    DATABASE_PATH = "giveaway_bot.db"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
active_giveaway = None
giveaway_participants = set()
giveaway_task = None

# –î–ª—è —Ä–µ–∫–ª–∞–º—ã
ad_active = False
ad_interval = 60

async def is_admin(user_id: int) -> bool:
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è user_id={user_id}")
    admins = await db.get_all_admins()
    return user_id in [admin['user_id'] for admin in admins]

async def check_subscription(user_id: int, chat_id: str) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: user_id={user_id}, chat_id={chat_id}, status={member.status}")
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}, chat_id={chat_id}: {e}")
        return False

async def cancel_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    is_active = active_giveaway is not None
    is_admin_user = await is_admin(message.from_user.id)
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_user_menu(active_giveaway=is_active, is_admin=is_admin_user),
        parse_mode="HTML"
    )

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
async def on_startup():
    global giveaway_system
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await db.init_db()
    await db.init_db_v2_tables()
    await db.update_channels_table()  # –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã channels
    await db.add_admin(ADMIN_ID)
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
    giveaway_system = GiveawaySystem(bot, db)
    logger.info("–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    os.makedirs("backups", exist_ok=True)
    os.makedirs("giveaway_photos", exist_ok=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# === –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={message.from_user.id}")
    user_id = message.from_user.id
    username = message.from_user.username

    await db.add_user(user_id, username)

    args = message.text.split()
    if len(args) > 1 and args[1].startswith("join_"):
        giveaway_id = int(args[1].replace("join_", ""))
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ giveaway_id={giveaway_id} –æ—Ç user_id={user_id}")
        result = await giveaway_system.join_giveaway(giveaway_id, user_id)

        if result['success']:
            await message.answer(
                f"üéâ <b>–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!</b>\n\n"
                f"üí∞ –ü—Ä–∏–∑ –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: ~{result['prize_per_winner']:.2f}\n"
                f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result['participants_count']}\n\n"
                f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ!\n"
                f"–£–¥–∞—á–∏! üçÄ",
                parse_mode="HTML"
            )
        else:
            reasons = {
                'not_found': "–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω",
                'ended': "–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω",
                'already_joined': "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!",
                'not_subscribed': "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è"
            }
            await message.answer(
                f"‚ùå {reasons.get(result['reason'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                parse_mode="HTML"
            )
        return

    is_active = active_giveaway is not None
    is_admin_user = await is_admin(user_id)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.\n",
        reply_markup=get_user_menu(active_giveaway=is_active, is_admin=is_admin_user),
        parse_mode="HTML"
    )

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    user_id = message.from_user.id
    if not await is_admin(user_id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ user_id={user_id}")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu(),
        parse_mode="HTML"
    )

# === CALLBACK - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ back_to_admin –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ user_id={user_id}")
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_user_menu")
async def back_to_user_menu(callback: CallbackQuery):
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é –¥–ª—è user_id={callback.from_user.id}")
    is_active = active_giveaway is not None
    is_admin_user = await is_admin(callback.from_user.id)
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.\n",
        reply_markup=get_user_menu(active_giveaway=is_active, is_admin=is_admin_user),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "go_to_admin")
async def go_to_admin(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ go_to_admin –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ user_id={user_id}")
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò ===
@dp.callback_query(F.data == "channels_menu")
async def channels_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ channels_menu –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ user_id={user_id}")
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_channels_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "add_channel")
async def add_channel_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ add_channel –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ user_id={user_id}")
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>@channel_name</code>, <code>-100123456789</code>, –∏–ª–∏ —Å—Å—ã–ª–∫—É <code>t.me/channel_name</code>\n\n"
        "–û—Ç–º–µ–Ω–∞: /cancel",
        parse_mode="HTML"
    )
    await state.set_state(ChannelStates.adding_channel)
    await state.update_data(is_admin=True)
    await callback.answer()

@dp.callback_query(F.data == "add_user_channel")
async def add_user_channel_start(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –¥–ª—è user_id={callback.from_user.id}")
    await callback.message.edit_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>@channel_name</code>, <code>-100123456789</code>, –∏–ª–∏ —Å—Å—ã–ª–∫—É <code>t.me/channel_name</code>\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤) –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ (–¥–ª—è —á–∞—Ç–æ–≤).\n\n"
        "–û—Ç–º–µ–Ω–∞: /cancel",
        parse_mode="HTML"
    )
    await state.set_state(ChannelStates.adding_channel)
    await state.update_data(is_admin=False)
    await callback.answer()

@dp.message(ChannelStates.adding_channel)
async def add_channel_process(message: Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –æ—Ç user_id={message.from_user.id}, —Ç–µ–∫—Å—Ç={message.text}")
    text = message.text.strip()
    if text == "/cancel" or text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return

    data = await state.get_data()
    is_admin = data.get('is_admin', False)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞: @username, —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ t.me —Å—Å—ã–ª–∫–∞
    channel_id = text
    if channel_id.startswith('t.me/'):
        channel_id = '@' + channel_id.split('/')[-1]
    elif channel_id.startswith('https://t.me/'):
        channel_id = '@' + channel_id.split('/')[-1]

    try:
        chat = await bot.get_chat(channel_id)
        channel_name = chat.title or chat.username or channel_id
        chat_type = 'channel' if chat.type in ['channel', 'supergroup'] else 'chat'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
        bot_member = await bot.get_chat_member(channel_id, bot.id)
        if chat_type == 'channel' and bot_member.status not in ['administrator', 'creator']:
            logger.error(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ –∫–∞–Ω–∞–ª–µ {channel_id} –¥–ª—è user_id={message.from_user.id}")
            await message.answer(
                "–û—à–∏–±–∫–∞: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode="HTML"
            )
            return
        elif chat_type == 'chat' and bot_member.status not in ['member', 'administrator', 'creator']:
            logger.error(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞ {channel_id} –¥–ª—è user_id={message.from_user.id}")
            await message.answer(
                "–û—à–∏–±–∫–∞: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                parse_mode="HTML"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤)
        if not is_admin:
            user_member = await bot.get_chat_member(channel_id, message.from_user.id)
            if user_member.status not in ['administrator', 'creator']:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={message.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ {channel_id}")
                await message.answer(
                    "–û—à–∏–±–∫–∞: –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞.",
                    parse_mode="HTML"
                )
                return

        await db.add_channel(channel_id, channel_name, chat_type=chat_type, added_by=message.from_user.id if not is_admin else None)

        is_active = active_giveaway is not None
        is_admin_user = await is_admin(message.from_user.id)
        reply_markup = get_admin_menu() if is_admin else get_user_menu(active_giveaway=is_active, is_admin=is_admin_user)
        await message.answer(
            f"{'–ö–∞–Ω–∞–ª' if chat_type == 'channel' else '–ß–∞—Ç'} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_name}\n"
            f"ID: <code>{channel_id}</code>\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: 5%",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ {channel_id} –¥–ª—è user_id={message.from_user.id}: {e}")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            f"‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç\n"
            f"‚Ä¢ ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
            reply_markup=get_admin_menu() if is_admin else get_user_menu(active_giveaway=active_giveaway is not None, is_admin=await is_admin(message.from_user.id)),
            parse_mode="HTML"
        )

    await state.clear()

@dp.callback_query(F.data == "list_channels")
async def list_channels(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ list_channels –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ user_id={user_id}")
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    channels = await db.get_all_channels()

    if not channels:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_channels_menu(),
            parse_mode="HTML"
        )
    else:
        text = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        for channel in channels:
            text += (
                f"‚Ä¢ {channel['channel_name']}\n"
                f"  ID: <code>{channel['channel_id']}</code>\n"
                f"  –¢–∏–ø: {channel['chat_type']}\n"
                f"  –ö–æ–º–∏—Å—Å–∏—è: {channel['commission']} {channel['commission_type']}\n"
                f"  {'–ê–∫—Ç–∏–≤–µ–Ω' if channel['active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                f"  –î–æ–±–∞–≤–∏–ª: {'–ê–¥–º–∏–Ω' if channel['added_by'] is None else f'ID {channel['added_by']}'}\n\n"
            )

        await callback.message.edit_text(
            text,
            reply_markup=get_channels_menu(),
            parse_mode="HTML"
        )

    await callback.answer()

@dp.callback_query(F.data == "delete_channel")
async def delete_channel_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not await is_admin(user_id):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ delete_channel –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ user_id={user_id}")
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    channels = await db.get_all_channels()

    if not channels:
        await callback.answer("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    text = "–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n"
    text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for channel in channels:
        text += f"‚Ä¢ {channel['channel_name']}: <code>{channel['channelOld channel_id']}</code>\n"
    text += "\n–û—Ç–º–µ–Ω–∞: /cancel"

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(ChannelStates.deleting_channel)
    await callback.answer()

@dp.message(ChannelStates.deleting_channel)
async def delete_channel_process(message: Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –æ—Ç user_id={message.from_user.id}, —Ç–µ–∫—Å—Ç={message.text}")
    text = message.text.strip()
    if text == "/cancel" or text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return

    channel_id = text
    channel = await db.get_channel(channel_id)
    if not channel:
        await message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_admin_menu())
        await state.clear()
        return

    await db.delete_channel(channel_id)
    await message.answer(
        f"–ö–∞–Ω–∞–ª {channel['channel_name']} —É–¥–∞–ª—ë–Ω!",
        reply_markup=get_admin_menu()
    )
    await state.clear()

@dp.message(GiveawayStates.uploading_photo)
async def process_giveaway_photo(message: Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç user_id={message.from_user.id}")
    photo_path = None
    
    if message.text not in ["/skip", "/cancel", "–æ—Ç–º–µ–Ω–∞"]:
        if message.photo:
            photo = message.photo[-1]
            file = await bot.get_file(photo.file_id)
            
            os.makedirs("giveaway_photos", exist_ok=True)
            photo_path = f"giveaway_photos/{photo.file_id}.jpg"
            
            await bot.download_file(file.file_path, photo_path)
        else:
            await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ /skip")
            return
    elif message.text in ["/cancel", "–æ—Ç–º–µ–Ω–∞"]:
        await cancel_action(message, state)
        return
    
    await state.update_data(photo_path=photo_path)
    
    data = await state.get_data()
    
    prize_per_winner = data['prize_amount'] / data['winners_count']
    
    text = (
        "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞</b>\n\n"
        f"üìç –ú–µ—Å—Ç–æ: {data['target_name']}\n"
        f"üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {data['prize_amount']} {data['currency']}\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winners_count']}\n"
        f"üíµ –ù–∞ –∫–∞–∂–¥–æ–≥–æ: ~{prize_per_winner:.2f} {data['currency']}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration_minutes']} –º–∏–Ω—É—Ç\n"
        f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {data['strategy']}\n"
    )
    
    if data.get('description'):
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:100]}...\n"
    if data.get('photo_path'):
        text += "üñº –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º\n"
    
    text += "\n<b>–í—Å–µ –≤–µ—Ä–Ω–æ?</b>"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="confirm_giveaway"))
    keyboard.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_admin" if await is_admin(message.from_user.id) else "back_to_user_menu"))
    
    await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    await state.set_state(GiveawayStates.confirming)

# === –û–®–ò–ë–ö–ò ===
@dp.error()
async def error_handler(update: ErrorEvent):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update.exception}")
    if update.update.message:
        await update.update.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    elif update.update.callback_query:
        await update.update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())