# –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
import asyncio
import random
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

logger = logging.getLogger(__name__)

class GiveawaySystem:
    def __init__(self, bot: Bot, db):
        self.bot = bot
        self.db = db
        self.active_giveaways: Dict[int, Dict] = {}  # giveaway_id -> giveaway_data
        self.giveaway_tasks: Dict[int, asyncio.Task] = {}  # giveaway_id -> task
        
    async def create_giveaway(
        self,
        creator_id: int,
        target_type: str,  # 'channel' –∏–ª–∏ 'chat'
        target_id: str,
        prize_amount: float,
        currency: str,
        winners_count: int,
        duration_minutes: int,
        photo_path: Optional[str] = None,
        description: Optional[str] = None,
        strategy: str = 'random'
    ) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        giveaway_id = await self.db.create_giveaway_v2(
            creator_id=creator_id,
            target_type=target_type,
            target_id=target_id,
            prize_amount=prize_amount,
            currency=currency,
            winners_count=winners_count,
            duration_minutes=duration_minutes,
            strategy=strategy,
            description=description,
            photo_path=photo_path
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        end_time = datetime.now() + timedelta(minutes=duration_minutes)
        self.active_giveaways[giveaway_id] = {
            'id': giveaway_id,
            'creator_id': creator_id,
            'target_type': target_type,
            'target_id': target_id,
            'prize_amount': prize_amount,
            'currency': currency,
            'winners_count': winners_count,
            'duration_minutes': duration_minutes,
            'strategy': strategy,
            'description': description,
            'photo_path': photo_path,
            'start_time': datetime.now(),
            'end_time': end_time,
            'participants': set(),
            'message_id': None
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        await self._send_giveaway_message(giveaway_id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        task = asyncio.create_task(self._giveaway_timer(giveaway_id))
        self.giveaway_tasks[giveaway_id] = task
        
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ä–æ–∑—ã–≥—Ä—ã—à #{giveaway_id} –¥–ª—è {target_type} {target_id}")
        return giveaway_id
    
    async def _send_giveaway_message(self, giveaway_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç"""
        giveaway = self.active_giveaways[giveaway_id]
        
        # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        prize_per_winner = giveaway['prize_amount'] / giveaway['winners_count']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        commission_info = await self._get_commission(giveaway['target_type'], giveaway['target_id'])
        commission_amount = self._calculate_commission(prize_per_winner, commission_info)
        final_prize_per_winner = prize_per_winner - commission_amount
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        end_time_str = giveaway['end_time'].strftime("%d.%m.%Y %H:%M")
        time_left = self._format_time_left(giveaway['end_time'])
        
        text = f"üéâ <b>–†–û–ó–´–ì–†–´–®</b> üéâ\n\n"
        
        if giveaway['description']:
            text += f"üìù {giveaway['description']}\n\n"
        
        text += f"üí∞ <b>–û–±—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</b> {giveaway['prize_amount']} {giveaway['currency']}\n"
        text += f"üèÜ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winners_count']}\n"
        text += f"üíµ <b>–ö–∞–∂–¥—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç:</b> {final_prize_per_winner:.2f} {giveaway['currency']}\n"
        
        if commission_amount > 0:
            text += f"üíº <i>–ö–æ–º–∏—Å—Å–∏—è: {commission_amount:.2f} {giveaway['currency']}</i>\n"
        
        text += f"\n‚è∞ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time_str}\n"
        text += f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left}\n\n"
        text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> 0\n\n"
        text += f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞:</b> {self._get_strategy_name(giveaway['strategy'])}\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(
            text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ",
            url=f"https://t.me/{(await self.bot.me()).username}?start=join_{giveaway_id}"
        ))
        keyboard.row(InlineKeyboardButton(
            text="üìä –£—á–∞—Å—Ç–Ω–∏–∫–∏: 0",
            callback_data=f"giveaway_info_{giveaway_id}"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if giveaway['photo_path']:
                # –° —Ñ–æ—Ç–æ
                photo = FSInputFile(giveaway['photo_path'])
                message = await self.bot.send_photo(
                    chat_id=giveaway['target_id'],
                    photo=photo,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=keyboard.as_markup()
                )
            else:
                # –ë–µ–∑ —Ñ–æ—Ç–æ
                message = await self.bot.send_message(
                    chat_id=giveaway['target_id'],
                    text=text,
                    parse_mode="HTML",
                    reply_markup=keyboard.as_markup()
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            giveaway['message_id'] = message.message_id
            await self.db.update_giveaway_message_id(giveaway_id, message.message_id)
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ #{giveaway_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ #{giveaway_id}: {e}")
    
    async def join_giveaway(self, giveaway_id: int, user_id: int) -> Dict:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É"""
        if giveaway_id not in self.active_giveaways:
            return {'success': False, 'reason': 'not_found'}
        
        giveaway = self.active_giveaways[giveaway_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
        if datetime.now() >= giveaway['end_time']:
            return {'success': False, 'reason': 'ended'}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
        if user_id in giveaway['participants']:
            return {'success': False, 'reason': 'already_joined'}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç
        if not await self._check_subscription(user_id, giveaway['target_id']):
            return {'success': False, 'reason': 'not_subscribed'}
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        giveaway['participants'].add(user_id)
        await self.db.add_participant(giveaway_id, user_id)
        await self.db.increment_participation(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self._update_giveaway_message(giveaway_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É #{giveaway_id}")
        
        return {
            'success': True,
            'participants_count': len(giveaway['participants']),
            'prize_per_winner': giveaway['prize_amount'] / giveaway['winners_count']
        }
    
    async def _update_giveaway_message(self, giveaway_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
        giveaway = self.active_giveaways[giveaway_id]
        
        if not giveaway['message_id']:
            return
        
        prize_per_winner = giveaway['prize_amount'] / giveaway['winners_count']
        commission_info = await self._get_commission(giveaway['target_type'], giveaway['target_id'])
        commission_amount = self._calculate_commission(prize_per_winner, commission_info)
        final_prize_per_winner = prize_per_winner - commission_amount
        
        end_time_str = giveaway['end_time'].strftime("%d.%m.%Y %H:%M")
        time_left = self._format_time_left(giveaway['end_time'])
        participants_count = len(giveaway['participants'])
        
        text = f"üéâ <b>–†–û–ó–´–ì–†–´–®</b> üéâ\n\n"
        
        if giveaway['description']:
            text += f"üìù {giveaway['description']}\n\n"
        
        text += f"üí∞ <b>–û–±—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</b> {giveaway['prize_amount']} {giveaway['currency']}\n"
        text += f"üèÜ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b> {giveaway['winners_count']}\n"
        text += f"üíµ <b>–ö–∞–∂–¥—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç:</b> {final_prize_per_winner:.2f} {giveaway['currency']}\n"
        
        if commission_amount > 0:
            text += f"üíº <i>–ö–æ–º–∏—Å—Å–∏—è: {commission_amount:.2f} {giveaway['currency']}</i>\n"
        
        text += f"\n‚è∞ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time_str}\n"
        text += f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left}\n\n"
        text += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {participants_count}\n\n"
        text += f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞:</b> {self._get_strategy_name(giveaway['strategy'])}\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(
            text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ",
            url=f"https://t.me/{(await self.bot.me()).username}?start=join_{giveaway_id}"
        ))
        keyboard.row(InlineKeyboardButton(
            text=f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants_count}",
            callback_data=f"giveaway_info_{giveaway_id}"
        ))
        
        try:
            if giveaway['photo_path']:
                await self.bot.edit_message_caption(
                    chat_id=giveaway['target_id'],
                    message_id=giveaway['message_id'],
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=keyboard.as_markup()
                )
            else:
                await self.bot.edit_message_text(
                    chat_id=giveaway['target_id'],
                    message_id=giveaway['message_id'],
                    text=text,
                    parse_mode="HTML",
                    reply_markup=keyboard.as_markup()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id}: {e}")
    
    async def _giveaway_timer(self, giveaway_id: int):
        """–¢–∞–π–º–µ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        giveaway = self.active_giveaways[giveaway_id]
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        update_interval = 60  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        while datetime.now() < giveaway['end_time']:
            time_left = (giveaway['end_time'] - datetime.now()).total_seconds()
            
            if time_left <= 0:
                break
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞
            wait_time = min(update_interval, time_left)
            await asyncio.sleep(wait_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if giveaway_id in self.active_giveaways:
                await self._update_giveaway_message(giveaway_id)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
        await self._finish_giveaway(giveaway_id)
    
    async def _finish_giveaway(self, giveaway_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
        if giveaway_id not in self.active_giveaways:
            return
        
        giveaway = self.active_giveaways[giveaway_id]
        participants = list(giveaway['participants'])
        
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
        
        if not participants:
            # –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await self._send_no_winners_message(giveaway_id)
            await self.db.finish_giveaway(giveaway_id)
            del self.active_giveaways[giveaway_id]
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        winners = await self._select_winners(giveaway_id, participants)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–ø–ª–∞—Ç—ã
        prize_per_winner = giveaway['prize_amount'] / len(winners)
        commission_info = await self._get_commission(giveaway['target_type'], giveaway['target_id'])
        commission_amount = self._calculate_commission(prize_per_winner, commission_info)
        final_prize = prize_per_winner - commission_amount
        
        # –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–∑—ã
        for winner_id in winners:
            await self.db.update_balance(winner_id, final_prize)
            await self.db.add_transaction(
                winner_id,
                final_prize,
                "win",
                f"–í—ã–∏–≥—Ä—ã—à –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ #{giveaway_id}"
            )
            await self.db.increment_wins(winner_id)
            await self.db.update_participant_winner(giveaway_id, winner_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            try:
                await self.bot.send_message(
                    winner_id,
                    f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                    f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n"
                    f"üí∞ –ü—Ä–∏–∑: {final_prize:.2f} {giveaway['currency']}\n\n"
                    f"–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è {winner_id}: {e}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        total_commission = commission_amount * len(winners)
        if total_commission > 0:
            await self.db.add_transaction(
                giveaway['creator_id'],
                total_commission,
                "commission",
                f"–ö–æ–º–∏—Å—Å–∏—è —Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id}"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await self._send_winners_message(giveaway_id, winners, final_prize)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
        await self.db.finish_giveaway(giveaway_id)
        del self.active_giveaways[giveaway_id]
        
        logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à #{giveaway_id} –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {len(winners)}")
    
    async def _select_winners(self, giveaway_id: int, participants: List[int]) -> List[int]:
        """–í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        giveaway = self.active_giveaways[giveaway_id]
        winners_count = min(giveaway['winners_count'], len(participants))
        
        if giveaway['strategy'] == 'random':
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
            return random.sample(participants, winners_count)
        
        elif giveaway['strategy'] == 'first':
            # –ü–µ—Ä–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            participants_with_time = await self.db.get_participants_with_time(giveaway_id)
            participants_with_time.sort(key=lambda x: x['joined_at'])
            return [p['user_id'] for p in participants_with_time[:winners_count]]
        
        elif giveaway['strategy'] == 'active':
            # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–∏–π)
            participants_data = []
            for user_id in participants:
                user = await self.db.get_user(user_id)
                participants_data.append({
                    'user_id': user_id,
                    'activity': user['giveaways_participated']
                })
            
            participants_data.sort(key=lambda x: x['activity'], reverse=True)
            return [p['user_id'] for p in participants_data[:winners_count]]
        
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–ª—É—á–∞–π–Ω—ã–π
            return random.sample(participants, winners_count)
    
    async def _send_winners_message(self, giveaway_id: int, winners: List[int], prize_per_winner: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö"""
        giveaway = self.active_giveaways.get(giveaway_id)
        if not giveaway:
            return
        
        winners_text = []
        for winner_id in winners:
            try:
                user = await self.bot.get_chat(winner_id)
                username = f"@{user.username}" if user.username else f"ID: {winner_id}"
                winners_text.append(username)
            except:
                winners_text.append(f"ID: {winner_id}")
        
        text = (
            f"üéä <b>–†–û–ó–´–ì–†–´–® –ó–ê–í–ï–†–®–ï–ù</b> üéä\n\n"
            f"üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:</b>\n"
            f"{chr(10).join('ü•á ' + w for w in winners_text)}\n\n"
            f"üí∞ <b>–ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏–ª:</b> {prize_per_winner:.2f} {giveaway['currency']}\n\n"
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéâ"
        )
        
        try:
            await self.bot.send_message(
                chat_id=giveaway['target_id'],
                text=text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö: {e}")
    
    async def _send_no_winners_message(self, giveaway_id: int):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        giveaway = self.active_giveaways.get(giveaway_id)
        if not giveaway:
            return
        
        text = (
            f"üòî <b>–†–û–ó–´–ì–†–´–® –ó–ê–í–ï–†–®–ï–ù</b>\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n"
            f"–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω."
        )
        
        try:
            await self.bot.send_message(
                chat_id=giveaway['target_id'],
                text=text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {e}")
    
    async def _check_subscription(self, user_id: int, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            member = await self.bot.get_chat_member(chat_id, user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def _get_commission(self, target_type: str, target_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Ü–µ–ª–∏"""
        if target_type == 'channel':
            channel = await self.db.get_channel(target_id)
            if channel:
                return {
                    'value': channel['commission'],
                    'type': channel['commission_type']
                }
        elif target_type == 'chat':
            chat_comm = await self.db.get_chat_commission(target_id)
            if chat_comm:
                return {
                    'value': chat_comm['value'],
                    'type': chat_comm['commission_type']
                }
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%
        return {'value': 5.0, 'type': 'percent'}
    
    def _calculate_commission(self, amount: float, commission_info: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏"""
        if commission_info['type'] == 'percent':
            return amount * (commission_info['value'] / 100)
        else:
            return commission_info['value']
    
    def _format_time_left(self, end_time: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
        delta = end_time - datetime.now()
        
        if delta.total_seconds() <= 0:
            return "–ó–∞–≤–µ—Ä—à–µ–Ω"
        
        days = delta.days
        hours = delta.seconds // 3600
        minutes = (delta.seconds % 3600) // 60
        
        parts = []
        if days > 0:
            parts.append(f"{days}–¥")
        if hours > 0:
            parts.append(f"{hours}—á")
        if minutes > 0:
            parts.append(f"{minutes}–º")
        
        return " ".join(parts) if parts else "< 1–º"
    
    def _get_strategy_name(self, strategy: str) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        strategies = {
            'random': 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä',
            'first': '‚ö°Ô∏è –ü–µ—Ä–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏',
            'active': 'üî• –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ'
        }
        return strategies.get(strategy, strategy)
    
    async def cancel_giveaway(self, giveaway_id: int, reason: str = "–û—Ç–º–µ–Ω–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º") -> bool:
        """–û—Ç–º–µ–Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        if giveaway_id not in self.active_giveaways:
            return False
        
        giveaway = self.active_giveaways[giveaway_id]
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if giveaway_id in self.giveaway_tasks:
            self.giveaway_tasks[giveaway_id].cancel()
            del self.giveaway_tasks[giveaway_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ
        text = (
            f"‚ùå <b>–†–û–ó–´–ì–†–´–® –û–¢–ú–ï–ù–ï–ù</b>\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
        )
        
        try:
            await self.bot.send_message(
                chat_id=giveaway['target_id'],
                text=text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –≤ –ë–î
        await self.db.cancel_giveaway(giveaway_id, reason)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del self.active_giveaways[giveaway_id]
        
        logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à #{giveaway_id} –æ—Ç–º–µ–Ω–µ–Ω: {reason}")
        return True
    
    def get_active_giveaway(self, giveaway_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
        return self.active_giveaways.get(giveaway_id)
    
    def get_all_active_giveaways(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"""
        return list(self.active_giveaways.values())